{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["// AST walker module for OScript AST\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be:\n//\n//     walk.simple(myTree, {\n//       Expression: {\n//         pre: node => { ... }\n//       }\n//     })\n//\n// to do something with all expressions. All OScript AST node types\n// can be used to identify node types.\n//\n// Callbacks are specified by an object with pre and post properties,\n// which point to functions accepting a node. The pre-callback will be\n// called before children of the node will be visited and the post-callback\n// will be called after visiting the node children. If the pre-callback\n// returns true, children of the node will not be visited and the walking\n// will continue with the next sibling.\n//\n// The baseVisitor argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n//\n// The state argument can be used to give this walk an initial state.\n\nexport function simple (node, visitors, baseVisitor, state) {\n  if (!baseVisitor) baseVisitor = base\n  walk(node, null, state)\n\n  function walk (node, parent, state) {\n    const { type } = node\n    const callbacks = visitors[type]\n    let pre, post\n    if (callbacks) ({ pre, post } = callbacks)\n    if (pre && pre(node, state, parent)) return\n    baseVisitor[type](node, state, walk)\n    if (post) post(node, state, parent)\n  }\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callbacks as third parameter.\n\nexport function ancestor (node, visitors, baseVisitor, state) {\n  const ancestors = []\n  if (!baseVisitor) baseVisitor = base\n  walk(node, null, state)\n\n  function walk (node, parent, state) {\n    const { type } = node\n    const isNew = node !== ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    const callbacks = visitors[type]\n    let pre, post\n    if (callbacks) ({ pre, post } = callbacks)\n    if (pre) {\n      const result = pre(node, state, ancestors)\n      if (result) {\n        if (isNew) ancestors.pop()\n        return\n      }\n    }\n    baseVisitor[type](node, state, walk)\n    if (post) post(node, state, ancestors)\n    if (isNew) ancestors.pop()\n  }\n}\n\n// A full walk triggers the callbacks on each node\n\nexport function full (node, callbacks, baseVisitor, state) {\n  const { pre, post } = callbacks\n  if (!baseVisitor) baseVisitor = base\n  walk(node, null, state)\n\n  function walk (node, parent, state) {\n    const { type } = node\n    if (pre && pre(node, state, parent)) return\n    baseVisitor[type](node, state, walk)\n    if (post) post(node, state, parent)\n  }\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callbacks on each node\n\nexport function fullAncestor (node, callbacks, baseVisitor, state) {\n  const { pre, post } = callbacks\n  const ancestors = []\n  if (!baseVisitor) baseVisitor = base\n  walk(node, null, state)\n\n  function walk (node, parent, state) {\n    const { type } = node\n    const isNew = node !== ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    if (pre) {\n      const result = pre(node, state, ancestors)\n      if (result) {\n        if (isNew) ancestors.pop()\n        return\n      }\n    }\n    baseVisitor[type](node, state, walk)\n    if (post) post(node, state, ancestors)\n    if (isNew) ancestors.pop()\n  }\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\n\nexport function recursive (node, functions, baseVisitor, state) {\n  const visitor = functions ? make(functions, baseVisitor) : baseVisitor\n  walk(node, null, state)\n\n  function walk (node, parent, state) {\n    visitor[node.type](node, state, walk)\n  }\n}\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\n\nexport function make (functions, baseVisitor) {\n  return Object.assign(baseVisitor || base, functions)\n}\n\n// Finds the innermost node that contains the given position and passes the\n// given test. Returns a { node, state } object, or  undefined when it does\n// not find a matching node.\n\nexport function findNodeAround (node, position, test, baseVisitor, state) {\n  const { line, column } = position\n  const { pre, post } = makeFindTest(test)\n  if (!baseVisitor) baseVisitor = base\n  try {\n    walk(node, null, state)\n  } catch (error) {\n    if (error instanceof FoundWithParent) return { node: error.node, state, parent: error.parent }\n    throw error\n  }\n\n  function walk (node, parent, state) {\n    const { type, loc } = node\n    const { start, end } = loc\n    if (start.line > line || end.line < line ||\n        (start.line  === line && start.line === end.line &&\n        (start.column > column || end.column < column))) return\n    if (pre && pre(node, state, parent)) return\n    baseVisitor[type](node, state, walk)\n    if (post(node, state, parent)) throw new FoundWithParent(node, parent)\n  }\n}\n\n// Finds the innermost node that contains the given position and passes the\n// given test. Keeps an array of ancestor nodes (including the current node),\n// passes them to the test callbacks as a third parameter and includes them\n// in the returned object.\n\nexport function findNodeAroundWithAncestors (node, position, test, baseVisitor, state) {\n  const ancestors = []\n  const { line, column } = position\n  const { pre, post } = makeFindTest(test)\n  if (!baseVisitor) baseVisitor = base\n  try {\n    walk(node, null, state)\n  } catch (error) {\n    if (error instanceof Found) return { node: error.node, state, ancestors }\n    throw error\n  }\n\n  function walk (node, parent, state) {\n    const { type, loc } = node\n    const { start, end } = loc\n    if (start.line > line || end.line < line ||\n        (start.line  === line && start.line === end.line &&\n        (start.column > column || end.column < column))) return\n    const isNew = node !== ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    if (pre && pre(node, state, ancestors)) return\n    baseVisitor[type](node, state, walk)\n    if (post(node, state, ancestors)) throw new Found(node)\n    if (isNew) ancestors.pop()\n  }\n}\n\nfunction makeFindTest (test) {\n  if (typeof test === 'string') return { post: ({ type }) => type === test }\n  else if (typeof test === 'function') return { post: test }\n  else if (!test) return { post: () => true }\n  else return test\n}\n\nclass Found {\n  constructor (node) { this.node = node }\n}\n\nclass FoundWithParent {\n  constructor (node, parent) { this.node = node; this.parent = parent }\n}\n\n// ---------- Node walkers.\n\nfunction ignore () {}\n\nexport const base = {}\n\nbase.Program = (node, state, walk) => {\n  walk(node.body, node, state)\n}\n\n// ---------- Package\n\nbase.PackageDeclaration = (node, state, walk) => {\n  walk(node.name, node, state)\n  walk(node.object, node, state)\n}\n\nbase.ObjectDeclaration = (node, state, walk) => {\n  walk(node.id, node, state)\n  if (node.superObject) walk(node.superObject, node, state)\n  for (const declaration of node.body) walk(declaration, node, state)\n}\n\nbase.FeatureDeclaration = (node, state, walk) => {\n  walk(node.id, node, state)\n  if (node.init) walk(node.init, node, state)\n}\n\nbase.ObjectName = (node, state, walk) => {\n  for (const identifier of node.name) walk(identifier, node, state)\n}\n\n// ---------- Script\n\nbase.ScriptSource = (node, state, walk) => {\n  for (const statement of node.body) walk(statement, node, state)\n}\n\n// ---------- Dump\n\nbase.DumpSource = (node, state, walk) => {\n  walk(node.id, node, state)\n  walk(node.parent, node, state)\n  for (const feature of node.assignments) walk(feature, node, state)\n  for (const assignment of node.assignments) walk(assignment, node, state)\n  for (const script of node.scripts) walk(script, node, state)\n}\n\nbase.FeatureAddition = base.LabelStatement = (node, state, walk) => {\n  walk(node.id, node, state)\n}\n\nbase.FeatureInitialization = (node, state, walk) => {\n  walk(node.id, node, state)\n  walk(node.value, node, state)\n}\n\n// ---------- Scopes\n\nbase.ScriptDeclaration = (node, state, walk) => {\n  walk(node.id, node, state)\n  for (const part of node.body) walk(part, node, state)\n}\n\nbase.FunctionDeclaration = (node, state, walk) => {\n  walk(node.id, node, state)\n  for (const param of node.params) walk(param, node, state)\n  for (const statement of node.body) walk(statement, node, state)\n}\n\nbase.Parameter = (node, state, walk) => {\n  walk(node.id, node, state)\n  if (node.init) walk(node.init, node, state)\n}\n\n// ---------- Statements\n\nbase.IfStatement = (node, state, walk) => {\n  walk(node.test, node, state)\n  for (const statement of node.consequent) walk(statement, node, state)\n  for (const statement of node.otherClauses) walk(statement, node, state)\n  for (const statement of node.alternate) walk(statement, node, state)\n}\n\nbase.ElseIfClause = (node, state, walk) => {\n  walk(node.test, node, state)\n  for (const statement of node.consequent) walk(statement, node, state)\n}\n\nbase.SwitchStatement = (node, state, walk) => {\n  walk(node.discriminant, node, state)\n  for (const switchCase of node.cases) walk(switchCase, node, state)\n}\n\nbase.SwitchCase = (node, state, walk) => {\n  for (const test of node.tests) walk(test, node, state)\n  for (const switchCase of node.consequent) walk(switchCase, node, state)\n}\n\nbase.WhileStatement = base.RepeatStatement = (node, state, walk) => {\n  walk(node.test, node, state)\n  for (const statement of node.body) walk(statement, node, state)\n}\n\nbase.ForStatement = (node, state, walk) => {\n  if (node.init) walk(node.test, node, state)\n  if (node.test) walk(node.test, node, state)\n  if (node.update) walk(node.update, node, state)\n  for (const statement of node.body) walk(statement, node, state)\n}\n\nbase.ForEachStatement = (node, state, walk) => {\n  walk(node.left, node, state)\n  walk(node.right, node, state)\n  for (const statement of node.body) walk(statement, node, state)\n}\n\nbase.StructuredForStatement = (node, state, walk) => {\n  walk(node.variable, node, state)\n  walk(node.start, node, state)\n  walk(node.end, node, state)\n  if (node.step) walk(node.step, node, state)\n  for (const statement of node.body) walk(statement, node, state)\n}\n\nbase.BreakStatement = base.ContinueStatement = base.EmptyStatement = ignore\n\nbase.BreakIfStatement = base.ContinueIfStatement = (node, state, walk) => {\n  walk(node.test, node, state)\n}\n\nbase.GotoStatement = (node, state, walk) => {\n  walk(node.label, node, state)\n}\n\nbase.ReturnStatement = (node, state, walk) => {\n  if (node.argument) walk(node.argument, node, state)\n}\n\nbase.VariableDeclaration = (node, state, walk) => {\n  for (const declaration of node.declarations) walk(declaration, node, state)\n}\n\nbase.VariableDeclarator = (node, state, walk) => {\n  walk(node.id, node, state)\n  if (node.init) walk(node.init, node, state)\n}\n\n// ---------- Expressions\n\nbase.ConditionalExpression = (node, state, walk) => {\n  walk(node.test, node, state)\n  for (const statement of node.consequent) walk(statement, node, state)\n  for (const statement of node.alternate) walk(statement, node, state)\n}\n\nbase.BinaryExpression = (node, state, walk) => {\n  walk(node.left, node, state)\n  walk(node.right, node, state)\n}\n\nbase.UnaryExpression = (node, state, walk) => {\n  walk(node.argument, node, state)\n}\n\nbase.MemberExpression = (node, state, walk) => {\n  walk(node.object, node, state)\n  walk(node.property, node, state)\n}\n\nbase.SliceExpression = (node, state, walk) => {\n  walk(node.object, node, state)\n  walk(node.start, node, state)\n  walk(node.end, node, state)\n}\n\nbase.IndexExpression = (node, state, walk) => {\n  walk(node.object, node, state)\n  walk(node.index, node, state)\n}\n\nbase.CallExpression = (node, state, walk) => {\n  walk(node.callee, node, state)\n  for (const argument of node.arguments) walk(argument, node, state)\n}\n\nbase.ThisExpression = base.SuperExpression = ignore\n\nbase.AssocExpression = (node, state, walk) => {\n  for (const property of node.properties) walk(property, node, state)\n}\n\nbase.Property = (node, state, walk) => {\n  walk(node.key, node, state)\n  walk(node.value, node, state)\n}\n\nbase.ListExpression = (node, state, walk) => {\n  for (const element of node.elements) walk(element, node, state)\n}\n\nbase.ListComprehension = (node, state, walk) => {\n  walk(node.expression, node, state)\n  walk(node.left, node, state)\n  walk(node.right, node, state)\n  if (node.test) walk(node.test, node, state)\n}\n\nbase.AtExpression = base.ParenthesisExpression = (node, state, walk) => {\n  walk(node.expression, node, state)\n}\n\nbase.XlateExpression = (node, state, walk) => {\n  walk(node.ospace, node, state)\n  walk(node.string, node, state)\n}\n\n// ---------- Identifiers and Literals\n\nbase.Identifier = base.LegacyAlias = base.Literal = ignore\n"],"names":[],"mappings":"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"}